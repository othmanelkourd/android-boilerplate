import java.nio.file.Files
import java.nio.file.Paths
import java.util.regex.Pattern

import static java.util.regex.Pattern.compile

static def shouldSkip(project) { return project.name == "libs" || project.name == "features" }

static def isAndroidModule(project) {
  return project.plugins.find {
    it.class.name == "com.android.build.gradle.LibraryPlugin" || it.class.name == "com.android.build.gradle.AppPlugin"
  }
}

static def setPreDex(project) {
  project.plugins.whenPluginAdded { plugin ->
    if ("com.android.build.gradle.AppPlugin" == plugin.class.name) {
      project.android.dexOptions.preDexLibraries = BuildUtils.preDex
    } else if ("com.android.build.gradle.LibraryPlugin" == plugin.class.name) {
      project.android.dexOptions.preDexLibraries = BuildUtils.preDex
    }
  }
}

task incrementVersionNumberByBuild {
  doLast {
    def version_code = Integer.valueOf(file("$rootDir/VERSION_CODE").readLines()[0].trim()) +
      Integer.valueOf(build_number)

    file("$rootDir/VERSION_CODE").write(version_code.toString())
  }
}

task generateLocalTestFolders {
  group 'utils'
  description 'Generates Kotlin local test folder'

  doLast {
    subprojects {
      def isGroupDir = { dir -> dir == 'libs' || dir == 'features' }
      def testDir = "$it.projectDir/src/test"

      if (!Files.exists(Paths.get(testDir)) && !isGroupDir(it.name))
        Files.createDirectories(Paths.get("$testDir/kotlin"))
    }
  }
}

task listLayoutIDs {
  group 'utils'
  description 'Print all IDs contained in Android layout files'

  doLast {
    final Pattern VIEW = compile("<([\\w.]+)")
    final Pattern ID = compile("android:id=\"(.*?)\"")

    def layoutDir = "${project.projectDir.absolutePath}/src/main/res/layout"

    println "LayoutDir = $layoutDir"

    def files = new File(layoutDir).listFiles()

    files.each {
      println "\n${it.getName()}"
      String viewType

      it.newReader().lines().each {
        def viewMatcher = VIEW.matcher(it)

        if (viewMatcher.find())
          viewType = viewMatcher.group(1)

        def idMatcher = ID.matcher(it)

        if (idMatcher.find())
          println "\t${idMatcher.group(1)} -> $viewType"
      }
    }
  }
}

ext.shouldSkip = this.&shouldSkip
ext.isAndroidModule = this.&isAndroidModule
ext.setPreDex = this.&setPreDex
