apply plugin: 'jacoco'
apply from: rootProject.file('tools/exclusions.gradle')

//task fullCoverageReport(type: JacocoReport) {
//	dependsOn 'createDebugCoverageReport'
//	dependsOn 'testDebugUnitTest'
//
//	reports {
//		xml.enabled = true
//		html.enabled = true
//	}
//
//	def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
//					  '**/*Test*.*', 'android/**/*.*',
//					  '**/*_MembersInjector.class',
//					  '**/Dagger*Component.class',
//					  '**/Dagger*Component$Builder.class',
//					  '**/*_*Factory.class',
//					  '**/*ComponentImpl.class',
//					  '**/*SubComponentBuilder.class']
//	def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//	def mainSrc = "${project.projectDir}/src/main/java"
//
//	sourceDirectories = files([mainSrc])
//	classDirectories = files([debugTree])
//	executionData = fileTree(dir: "$buildDir", includes: [
//		"jacoco/testDebugUnitTest.exec",
//		"outputs/code-coverage/connected/*coverage.ec"
//	])
//}

jacoco {
	toolVersion = "0.7.9"
}

task fullCoverageReport(type: JacocoReport) {
	group "Report"
	description "Generate JaCoCo coverage reports"

	reports {
		xml.enabled = true
		html.enabled = true
	}

	sourceDirectories = files(["src/main/java"])

	def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: exclusions)
	def mainSrc = "${project.projectDir}/src/main/java"

	sourceDirectories = files([mainSrc])
	classDirectories = files([debugTree])

	executionData = fileTree(dir: "$buildDir", includes: [
		"jacoco/testDebugUnitTest.exec",
		"outputs/code-coverage/connected/*coverage.ec"
	])
}
