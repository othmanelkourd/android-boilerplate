apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'io.fabric'

apply from: "$rootDir/tools/tools.gradle"

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"

    defaultConfig {
        applicationId "com.example"

        minSdkVersion 19
        targetSdkVersion 26

        versionCode 1000
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'

        buildConfigField 'Boolean', 'WATERMARK', 'false'
    }

    dataBinding {
        enabled true
    }

    signingConfigs {
        debug {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file("$rootDir/distribution/debug.keystore")
            storePassword 'android'
        }

        if (System.getenv("KEY_ALIAS") == null) {
            release {}
        } else {
            release {
                keyAlias System.getenv("KEY_ALIAS")
                keyPassword System.getenv("KEY_PASSWORD")
                storeFile file(System.getenv("KEYSTORE"))
                storePassword System.getenv("KEYSTORE_PASSWORD")
            }
        }
    }

    buildTypes {
        debug {
            versionNameSuffix ".debug"

            minifyEnabled true
            useProguard true
            testCoverageEnabled true

            signingConfig signingConfigs.debug

            buildConfigField 'Boolean', 'WATERMARK', 'true'
            buildConfigField 'String', 'API_URL', '"http://192.168.1.34:3001"'
        }

        mocked {
            versionNameSuffix ".mocked"

            minifyEnabled true
            useProguard true

            signingConfig signingConfigs.debug
        }

        qa {
            versionNameSuffix ".qa"

            minifyEnabled true
            useProguard true

            signingConfig signingConfigs.debug

            ext.betaDistributionGroupAliases = "qa"
            ext.betaDistributionReleaseNotesFilePath = "$projectDir/release-notes-qa.txt"
        }

        release {
            minifyEnabled true
            useProguard true
            zipAlignEnabled true
            shrinkResources true

            signingConfig signingConfigs.release

            ext.betaDistributionGroupAliases = "beta"
            ext.betaDistributionReleaseNotesFilePath = "$projectDir/release-notes.txt"
        }
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        unitTests.returnDefaultValues = true

        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    packagingOptions {
        // exclude 'META-INF/rxjava.properties'
    }

}

final versions = rootProject.ext

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])

    // Test Libraries

    testApi "junit:junit:$versions.junit"
    testApi "org.mockito:mockito-android:$versions.mockito"
    testApi "org.hamcrest:hamcrest-all:$versions.hamcrest"
    testApi "org.robolectric:robolectric:$versions.robolectric"
    androidTestApi "com.android.support.test:runner:$versions.testSupportLibrary"
    androidTestApi "com.linkedin.testbutler:test-butler-library:$versions.testButler"

    // Android Support Libraries

    api "com.android.support:support-annotations:$versions.supportLibrary"
    api "com.android.support.constraint:constraint-layout:1.0.2"
    api("com.android.support:appcompat-v7:$versions.supportLibrary") {
        exclude module: 'support-annotations'
        exclude module: 'support-v4'
    }
    api("com.android.support:design:$versions.supportLibrary") {
        exclude module: 'support-v4'
        exclude module: 'appcompat-v7'
        exclude module: 'recyclerview-v7'
    }
    api "com.android.support:support-v4:$versions.supportLibrary"
    api "com.android.support:support-v13:$versions.supportLibrary"
    api("com.android.support:recyclerview-v7:$versions.supportLibrary") {
        exclude module: 'support-annotations'
        exclude module: 'support-compat'
        exclude module: 'support-core-ui'
    }
    api "com.android.support:cardview-v7:$versions.supportLibrary"

    // Libs

    // Google
    api "com.google.android.gms:play-services-location:$versions.play"
    api "com.google.firebase:firebase-core:$versions.firebase"
    api "com.google.firebase:firebase-messaging:$versions.firebase"
    api "com.google.code.gson:gson:$versions.gson"

    // Facebook
    api "com.facebook.android:facebook-android-sdk:$versions.facebook"
    api "com.facebook.rebound:rebound:$versions.rebound"
    api "com.facebook.fresco:fresco:$versions.fresco"

    // RxJava
    api "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"
    api "io.reactivex.rxjava2:rxjava:$versions.rxJava"

    // Square Up Tools
    api "com.squareup.picasso:picasso:$versions.picasso"
    api("com.squareup.retrofit2:retrofit:$versions.retrofit") {
        exclude module: 'okhttp'
    }
    api("com.squareup.retrofit2:converter-gson:$versions.retrofit") {
        exclude module: 'retrofit'
        exclude module: 'gson'
    }
    api("com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit") {
        exclude module: 'retrofit'
    }
    api "com.squareup.okhttp3:okhttp:$versions.okhttp"
    api("com.squareup.okhttp3:logging-interceptor:$versions.okhttp") {
        exclude module: 'okhttp'
    }

    // Others
    api "org.greenrobot:eventbus:$versions.eventbus"
    api "com.android.support.test.espresso:espresso-idling-resource:$versions.espresso"
    api "de.psdev.licensesdialog:licensesdialog:$versions.licensesDialog"
    api "com.github.siyamed:android-shape-imageview:$versions.shapeImageView"
    api("com.orhanobut:hawk:$versions.hawk") {
        exclude module: 'gson'
    }

    // Development and Support Libs

    releaseApi "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"
    qaApi "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"
    testApi "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"
    debugApi "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary"
    api("com.crashlytics.sdk.android:crashlytics:$versions.crashlytics") { transitive = true }
    debugApi "com.facebook.stetho:stetho:$versions.stetho"
    debugApi "com.facebook.stetho:stetho-okhttp3:$versions.stetho"
    api "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}

configurations.all {
    resolutionStrategy {
        force "org.hamcrest:hamcrest-core:$versions.hamcrest"
        force "com.google.code.findbugs:jsr305:3.0.1"
    }

    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.android.support'
                && !details.requested.name.contains('multidex')) {
            details.useVersion "$versions.supportLibrary"
        }
    }
}

apply plugin: 'com.google.gms.google-services'
