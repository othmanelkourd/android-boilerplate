apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

apply from: rootProject.file('tools/jacoco.gradle')
apply from: rootProject.file('tools/linters.gradle')

final app_name = 'Boilerplate'

android {
	defaultConfig {
		applicationId "com.example"
		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
		vectorDrawables.useSupportLibrary true
	}

	dexOptions {
		preDexLibraries "true" != System.getenv("CI")
		maxProcessCount 8
	}

	aaptOptions {
		cruncherEnabled false
	}

	dataBinding {
		enabled true
	}

	signingConfigs {
		debug {
			keyAlias 'androiddebugkey'
			keyPassword 'android'
			storeFile file("$rootDir/distribution/debug.keystore")
			storePassword 'android'
		}

		if (System.getenv("KEY_ALIAS") == null) {
			release {}
		} else {
			release {
				keyAlias System.getenv("KEY_ALIAS")
				keyPassword System.getenv("KEY_PASSWORD")
				storeFile file(System.getenv("KEYSTORE"))
				storePassword System.getenv("KEYSTORE_PASSWORD")
			}
		}
	}

	buildTypes {
		debug {
			versionNameSuffix ".debug"
			minifyEnabled false
			useProguard "true" == System.getenv("CI")
			debuggable true
			shrinkResources false
			signingConfig signingConfigs.debug

			ext.alwaysUpdateBuildId = false

			testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')

			testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'

			resValue 'string', 'app_name', "1." + app_name + ".debug"
		}

		release {
			zipAlignEnabled true
			shrinkResources true
			minifyEnabled true
			signingConfig signingConfigs.release

			ext.betaDistributionGroupAliases = "release"
			ext.betaDistributionNotifications = true
			ext.betaDistributionReleaseNotesFilePath = "$projectDir/release-notes.txt"

			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-fresco.pro'
			consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

			resValue 'string', 'app_name', app_name
		}
	}

	testOptions {
		unitTests {
			includeAndroidResources = true
			returnDefaultValues = true
		}
	}

	applicationVariants.all { variant ->
		if (variant.buildType.name == "release") {
			variant.mergedFlavor.versionCode = Integer.valueOf(file("$rootDir/VERSION_CODE").readLines()[0].trim())
			variant.mergedFlavor.versionName = file("$rootDir/VERSION").text
		}
	}

	packagingOptions {
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
		exclude 'META-INF/rxjava.properties'
	}
}

tasks.matching { it instanceof Test }.all {
	testLogging {
		showExceptions true
		showCauses true
		showStackTraces true

		events = ["failed", "passed", "skipped", "standardOut", "standardError"]
	}
}

jacoco {
	toolVersion = "0.7.4+"
}

final versions = rootProject.ext

dependencies {
	// ---------------------------------------------------------------------------------------------
	// Project Libraries
	// ---------------------------------------------------------------------------------------------
	implementation project(':libraries:uava')
	implementation project(':libraries:logger')
	implementation project(':libraries:android-utils')
	implementation project(':libraries:android-widgets')
	implementation project(':libraries:analytics')
	implementation project(':libraries:persistence')
	testImplementation project(':libraries:test-utils')

	// ---------------------------------------------------------------------------------------------
	// Dependencies
	// ---------------------------------------------------------------------------------------------
	implementation "com.android.support:support-annotations:$versions.supportLibrary"
	implementation "com.android.support.constraint:constraint-layout:$versions.constraintLayout"
	implementation("com.android.support:appcompat-v7:$versions.supportLibrary") {
		exclude module: 'support-annotations'
		exclude module: 'support-v4'
		exclude module: 'cardview-v7'
	}
	implementation("com.android.support:design:$versions.supportLibrary") {
		exclude module: 'support-v4'
		exclude module: 'appcompat-v7'
		exclude module: 'recyclerview-v7'
		exclude module: 'cardview-v7'
	}
	implementation "com.android.support:support-v4:$versions.supportLibrary"
	implementation "com.android.support:support-v13:$versions.supportLibrary"
	implementation("com.android.support:recyclerview-v7:$versions.supportLibrary") {
		exclude module: 'support-annotations'
		exclude module: 'support-compat'
		exclude module: 'support-core-ui'
	}
	implementation "com.google.firebase:firebase-crash:$versions.play"
	implementation "com.google.firebase:firebase-core:$versions.play"
	implementation "com.google.firebase:firebase-messaging:$versions.play"
	implementation "com.google.firebase:firebase-config:$versions.play"
	implementation "com.google.code.gson:gson:$versions.gson"
	implementation "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"
	implementation "io.reactivex.rxjava2:rxjava:$versions.rxJava"
	compile "com.google.dagger:dagger:$versions.dagger"
	compile "com.google.dagger:dagger-android:$versions.dagger"
	compile "com.google.dagger:dagger-android-support:$versions.dagger"
	annotationProcessor "com.google.dagger:dagger-android-processor:$versions.dagger"
	annotationProcessor "com.google.dagger:dagger-compiler:$versions.dagger"
	implementation "de.psdev.licensesdialog:licensesdialog:$versions.licensesDialog"
	implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
	implementation "com.facebook.fresco:fresco:$versions.fresco"

	// ---------------------------------------------------------------------------------------------
	// Development and Support Libs
	// ---------------------------------------------------------------------------------------------
	annotationProcessor "com.uber.nullaway:nullaway:$versions.nullaway"
	implementation("com.crashlytics.sdk.android:crashlytics:$versions.crashlytics") {
		transitive = true
	}
	releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"
	testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"
	debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary"
	debugImplementation "com.facebook.stetho:stetho:$versions.stetho"
	debugImplementation "com.facebook.stetho:stetho-okhttp3:$versions.stetho"
	debugImplementation "com.tspoon.traceur:traceur:$versions.traceur"
	debugImplementation("com.squareup.okhttp3:logging-interceptor:$versions.okhttp") {
		exclude module: 'okhttp'
	}

	// ---------------------------------------------------------------------------------------------
	// Test Libs
	// ---------------------------------------------------------------------------------------------
	testImplementation "junit:junit:$versions.junit"
	testImplementation "org.mockito:mockito-core:$versions.mockito"
	testImplementation "org.hamcrest:hamcrest-all:$versions.hamcrest"
	testImplementation "org.robolectric:robolectric:$versions.robolectric"
	testImplementation "br.com.concretesolutions:requestmatcher:$versions.requestmatcher"
	testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"
	testImplementation "com.jayway.jsonpath:json-path-assert:$versions.jsonpathassert"
	testImplementation "com.google.code.gson:gson:$versions.gson"

	androidTestImplementation "junit:junit:$versions.junit"
	androidTestImplementation "org.mockito:mockito-android:$versions.mockito"
	androidTestImplementation "com.android.support.test:runner:$versions.testSupportLibrary"
	androidTestImplementation "com.android.support.test:rules:$versions.testSupportLibrary"
	androidTestImplementation "com.android.support.test.espresso:espresso-core:$versions.espresso"
	androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$versions.espresso"
	androidTestImplementation "com.android.support.test.espresso:espresso-intents:$versions.espresso"
	androidTestImplementation "com.android.support.test.espresso:espresso-web:$versions.espresso"
	androidTestImplementation "com.linkedin.testbutler:test-butler-library:$versions.testButler"
}

configurations.all {
	resolutionStrategy {
		force "org.hamcrest:hamcrest-core:$versions.hamcrest"
		force "com.google.code.findbugs:jsr305:$versions.googlefindbugs"
	}

	resolutionStrategy.eachDependency { details ->
		if (details.requested.group == 'com.android.support'
			&& !details.requested.name.contains('multidex')) {
			details.useVersion "$versions.supportLibrary"
		}
	}
}

apply plugin: 'com.google.gms.google-services'
