apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

apply from: "$rootDir/tools/layout-ids.gradle"
apply from: "$rootDir/tools/test-butler.gradle"
apply from: "$rootDir/tools/jacoco.gradle"

final app_name = 'Boilerplate'

android {
  defaultConfig {
    applicationId "com.example"
    multiDexEnabled false
    testInstrumentationRunner "com.example.InstrumentationRunner"
  }

  dexOptions {
    javaMaxHeapSize "2g"
    preDexLibraries !rootProject.ext.isCI
    maxProcessCount rootProject.ext.cores
  }

  aaptOptions {
    cruncherEnabled false
  }

  lintOptions {
    checkAllWarnings true
    warningsAsErrors true
    lintConfig file("$rootDir/lint.xml")

    if (rootProject.ext.isCI) {
      textReport true
      textOutput 'stdout'
    }
  }

  signingConfigs {
    debug {
      keyAlias 'androiddebugkey'
      keyPassword 'android'
      storeFile file("$rootDir/app/distribution/debug.keystore")
      storePassword 'android'
    }

    if (System.getenv("KEY_ALIAS") != null) {
      release {
        keyAlias System.getenv("KEY_ALIAS")
        keyPassword System.getenv("KEY_PASSWORD")
        storeFile file(System.getenv("KEYSTORE_FILE"))
        storePassword System.getenv("KEYSTORE_PASSWORD")
      }
    }
  }

  buildTypes {
    debug {
      versionNameSuffix ".debug"
      minifyEnabled true
      useProguard false
      debuggable true
      shrinkResources false
      signingConfig signingConfigs.debug

      ext.alwaysUpdateBuildId = false
      ext.enableCrashlytics = false

      testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')

      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-fresco.pro'
      consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'

      resValue 'string', 'app_name', "1." + app_name + ".debug"
      buildConfigField 'String', 'API_URI', '"http://localhost:3000"'
    }

    release {
      zipAlignEnabled true
      shrinkResources true
      minifyEnabled true
      crunchPngs false

      if (System.getenv("KEY_ALIAS") == null) {
        signingConfig signingConfigs.debug
      } else {
        signingConfig signingConfigs.release
      }

      ext.betaDistributionGroupAliases = "release"
      ext.betaDistributionNotifications = true
      ext.betaDistributionReleaseNotesFilePath = "$projectDir/release-notes.txt"

      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-fresco.pro'
      consumerProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

      resValue 'string', 'app_name', app_name
      buildConfigField 'String', 'API_URI', '"http://api.prod"'
    }
  }

  testOptions {
    animationsDisabled true
    unitTests {
      includeAndroidResources = true
      returnDefaultValues = true
    }
  }

  applicationVariants.all { variant ->
    if (variant.buildType.name == "release") {
      variant.mergedFlavor.versionCode = Integer.valueOf(file("$rootDir/VERSION_CODE").readLines()[0].trim())
      variant.mergedFlavor.versionName = file("$rootDir/VERSION").text
    }
  }

  packagingOptions {
    exclude 'kotlin/**'
    exclude 'META-INF/*.kotlin_module'
    exclude 'META-INF/*.version'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/rxjava.properties'
  }
}

jacoco {
  toolVersion = versions.jacoco
}

tasks.withType(Test) {
  jacoco.includeNoLocationClasses = true
}

dependencies {
  // ---------------------------------------------------------------------------------------------
  // Project Libraries
  // ---------------------------------------------------------------------------------------------
  implementation project(':libs:resources')
  implementation project(':libs:toolkit')
  implementation project(':libs:toolkit-android')
  implementation project(':libs:api')
  implementation project(':libs:analytics')

  implementation project(':features:feature-auth')
  implementation project(':features:feature-about')

  // ---------------------------------------------------------------------------------------------
  // Kotlin
  // ---------------------------------------------------------------------------------------------
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlin"

  // ---------------------------------------------------------------------------------------------
  // Dependencies
  // ---------------------------------------------------------------------------------------------
  implementation "com.android.support:support-annotations:$versions.supportLibrary"
  implementation "com.android.support.constraint:constraint-layout:$versions.constraintLayout"
  implementation("com.android.support:appcompat-v7:$versions.supportLibrary") {
    exclude module: 'support-annotations'
    exclude module: 'support-v4'
    exclude module: 'cardview-v7'
  }
  implementation("com.android.support:design:$versions.supportLibrary") {
    exclude module: 'support-v4'
    exclude module: 'appcompat-v7'
    exclude module: 'recyclerview-v7'
    exclude module: 'cardview-v7'
  }
  implementation "com.android.support:support-v4:$versions.supportLibrary"
  implementation "com.android.support:support-v13:$versions.supportLibrary"
  implementation("com.android.support:recyclerview-v7:$versions.supportLibrary") {
    exclude module: 'support-annotations'
    exclude module: 'support-compat'
    exclude module: 'support-core-ui'
  }
  implementation "android.arch.lifecycle:extensions:$versions.arch"
  kapt "android.arch.lifecycle:compiler:$versions.arch"
  implementation "com.google.firebase:firebase-core:$versions.play"
  implementation "com.google.firebase:firebase-messaging:$versions.play"
  implementation "com.google.firebase:firebase-config:$versions.play"
  implementation "com.google.code.gson:gson:$versions.gson"
  implementation "io.reactivex.rxjava2:rxandroid:$versions.rxAndroid"
  implementation "io.reactivex.rxjava2:rxjava:$versions.rxJava"
  implementation "com.google.dagger:dagger-android:$versions.dagger"
  implementation "com.google.dagger:dagger-android-support:$versions.dagger"
  kapt "com.google.dagger:dagger-android-processor:$versions.dagger"
  kapt "com.google.dagger:dagger-compiler:$versions.dagger"
  implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
  implementation "com.facebook.fresco:fresco:$versions.fresco"
  implementation "com.scottyab:rootbeer-lib:$versions.rootbeer"
  implementation "com.jakewharton.timber:timber:$versions.timber"

  // ---------------------------------------------------------------------------------------------
  // Development and Support Libs
  // ---------------------------------------------------------------------------------------------
  implementation("com.crashlytics.sdk.android:crashlytics:$versions.crashlytics") {
    transitive = true
  }
  releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"
  testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$versions.leakCanary"
  debugImplementation "com.squareup.leakcanary:leakcanary-android:$versions.leakCanary"
  debugImplementation "com.facebook.stetho:stetho:$versions.stetho"
  debugImplementation "com.facebook.stetho:stetho-okhttp3:$versions.stetho"
  debugImplementation "com.tspoon.traceur:traceur:$versions.traceur"
  debugImplementation("com.squareup.okhttp3:logging-interceptor:$versions.okhttp") {
    exclude module: 'okhttp'
  }

  // ---------------------------------------------------------------------------------------------
  // Test Libs
  // ---------------------------------------------------------------------------------------------
  testImplementation "junit:junit:$versions.junit"
  testImplementation "org.mockito:mockito-core:$versions.mockito"
  testImplementation "org.hamcrest:hamcrest-all:$versions.hamcrest"
  testImplementation "org.robolectric:robolectric:$versions.robolectric"
  testImplementation "br.com.concretesolutions:requestmatcher:$versions.requestmatcher"
  testImplementation "com.squareup.okhttp3:mockwebserver:$versions.okhttp"
  testImplementation "com.jayway.jsonpath:json-path-assert:$versions.jsonpathassert"
  testImplementation "com.google.code.gson:gson:$versions.gson"

  androidTestImplementation "junit:junit:$versions.junit"
  androidTestImplementation "org.mockito:mockito-android:$versions.mockito"
  androidTestImplementation "com.android.support.test:runner:$versions.testSupportLibrary"
  androidTestImplementation "com.android.support.test:rules:$versions.testSupportLibrary"
  androidTestImplementation "com.android.support.test.espresso:espresso-core:$versions.espresso"
  androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$versions.espresso"
  androidTestImplementation "com.android.support.test.espresso:espresso-intents:$versions.espresso"
  androidTestImplementation "com.android.support.test.espresso:espresso-web:$versions.espresso"
  androidTestImplementation "com.linkedin.testbutler:test-butler-library:$versions.testButler"
}

kapt {
  useBuildCache = true
}

kotlin {
  experimental {
    coroutines 'enable'
  }
}

androidExtensions {
  experimental = true
}

apply plugin: 'com.google.gms.google-services'
