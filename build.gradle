import com.github.spotbugs.SpotBugsTask

apply from: rootProject.file('tools/predex.gradle')

apply plugin: "org.owasp.dependencycheck"
apply plugin: "org.sonarqube"

buildscript {
  ext.kotlin_version = '1.2.41'
  apply from: rootProject.file('versions.gradle')

  addRepos(repositories)

  dependencies {
    classpath 'com.android.tools.build:gradle:3.1.2'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
    classpath "org.jacoco:org.jacoco.core:$versions.jacoco"
    classpath "com.google.gms:google-services:$versions.google_services"
    classpath "io.fabric.tools:gradle:$versions.fabric"
    classpath "org.owasp:dependency-check-gradle:$versions.owasp_dependency_check"
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$versions.sonar"
    classpath "gradle.plugin.com.github.spotbugs:gradlePlugin:$versions.spotbugs_plugin"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

ext.testButler = '1.3.2'
ext.isCI = System.getenv("CI") == "true"
ext.cores = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

allprojects {
  addRepos(repositories)

  configurations.all {
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'com.android.support') {
          details.useVersion versions.supportLibrary
        }
      }
    }
  }

  tasks.withType(JavaCompile) {
    sourceCompatibility = versions.jvm
    targetCompatibility = versions.jvm

    configure(options) {
      encoding = "utf-8"
      incremental = true
      fork = true
    }
  }

  tasks.withType(Test) {
    if (project.hasProperty("skipReports")) {
      reports.html.enabled = false
      reports.junitXml.enabled = false
    }

    testLogging {
      exceptionFormat "full"
      showExceptions true
      showCauses true
      showStackTraces true
      maxParallelForks cores
      forkEvery 10
      events = ["failed", "passed", "skipped", "standardOut", "standardError"]
    }
  }

  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xlint:deprecation"
    }
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
      jvmTarget = versions.jvm
    }
  }

  apply from: rootProject.file('versions.gradle')
}

subprojects {
  apply from: rootProject.file('tools/linters.gradle')

  afterEvaluate { Project project ->
    project.tasks.whenTaskAdded {
      if (it.name == "testReleaseUnitTest") {
        it.enabled = false
      }
    }

    if (project.findProperty('android')) {
      android {
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }

        compileSdkVersion build_versions.target_sdk

        defaultConfig {
          minSdkVersion build_versions.min_sdk
          targetSdkVersion build_versions.target_sdk
          versionCode 1
          versionName "1.0"
          vectorDrawables.useSupportLibrary true
        }

        sourceSets {
          main.java.srcDirs += 'src/main/kotlin'
          debug.java.srcDirs += 'src/debug/kotlin'
          release.java.srcDirs += 'src/release/kotlin'
          test.java.srcDirs += 'src/test/kotlin'
          androidTest.java.srcDirs += 'src/androidTest/kotlin'
        }
      }
    }

    tasks.withType(SpotBugsTask) {
      excludeFilter rootProject.file("tools/linters/spotbugs-filter.xml")
      reports {
        xml.enabled = false
        html.enabled = true
        html.setDestination rootProject.file("reports/spotbugs/index.html")
      }
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

task printBuildScriptClasspath {
  doLast {
    println project.buildscript.configurations.classpath.asPath
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.7'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}
