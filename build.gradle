import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

apply plugin: "org.owasp.dependencycheck"
apply plugin: "org.sonarqube"
apply from: "$rootDir/build.utils.gradle"

buildscript {
  ext.kotlin_version = '1.3.20'
  ext.kotlin_version = Versions.kotlin

  repositories {
    google()
    jcenter()
    maven { url 'https://maven.fabric.io/public' }
    gradlePluginPortal()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.5.0-alpha03'
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${Versions.kotlin}"
    classpath "org.jacoco:org.jacoco.core:${Versions.jacoco}"
    classpath "com.google.gms:google-services:${Versions.google_services}"
    classpath "io.fabric.tools:gradle:${Versions.fabric}"
    classpath "org.owasp:dependency-check-gradle:${Versions.owasp_dependency_check}"
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${Versions.sonar}"
    classpath "gradle.plugin.io.gitlab.arturbosch.detekt:detekt-gradle-plugin:${Versions.detekt}"
    classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:${Versions.coveralls}"
    classpath "android.arch.navigation:navigation-safe-args-gradle-plugin:${Versions.navigation}"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

ext.testButler = Versions.testButler
ext.java_version = JavaVersion.VERSION_1_8

allprojects {
  if (shouldSkip(it)) return

  repositories {
    google()
    jcenter()
  }

  apply plugin: 'jacoco'
  apply from: "$rootDir/dotenv.gradle"

  jacoco {
    toolVersion = Versions.jacoco
  }

  configurations.all {
    resolutionStrategy {
      eachDependency { details ->
        if (details.requested.group == 'com.android.support') {
          details.useVersion Versions.supportLibrary
        }
      }
    }
  }

  tasks.withType(JavaCompile) {
    sourceCompatibility = java_version
    targetCompatibility = java_version

    configure(options) {
      options.compilerArgs << "-Xlint:deprecation"
      options.encoding = "utf-8"
      options.incremental = true
      options.fork = true
    }
  }

  tasks.withType(KotlinCompile).all {
    kotlinOptions {
      jvmTarget = java_version
    }
  }

  tasks.withType(Test) {
    if (project.hasProperty("skipReports")) {
      reports.html.enabled = true
      reports.junitXml.enabled = true
    }

    jacoco.includeNoLocationClasses = true

    testLogging {
      exceptionFormat "full"
      showExceptions true
      showCauses true
      showStackTraces true
      maxParallelForks BuildUtils.cores
      forkEvery 10
      events = ["failed", "passed", "skipped", "standardOut", "standardError"]
    }
  }
}

subprojects {
  if (shouldSkip(it)) return

  setPreDex(it)

  apply from: "$rootDir/tools/ktlint.gradle"
  apply from: "$rootDir/tools/detek.gradle"

  afterEvaluate { Project project ->
    project.tasks.whenTaskAdded {
      if (it.name == "testReleaseUnitTest") {
        it.enabled = false
      }
    }

    if (isAndroidModule(project)) {
      android {
        compileOptions {
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8
        }

        compileSdkVersion 28

        defaultConfig {
          minSdkVersion 21
          targetSdkVersion 28
          versionCode 1
          versionName "1.0"
          vectorDrawables.useSupportLibrary true
        }

        sourceSets {
          main.java.srcDirs += 'src/main/kotlin'
          debug.java.srcDirs += 'src/debug/kotlin'
          release.java.srcDirs += 'src/release/kotlin'
          test.java.srcDirs += 'src/test/kotlin'
          androidTest.java.srcDirs += 'src/androidTest/kotlin'
        }

        buildTypes { debug { testCoverageEnabled = true } }
      }
    }
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}

wrapper {
  gradleVersion = '5.1.1'
  distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}
